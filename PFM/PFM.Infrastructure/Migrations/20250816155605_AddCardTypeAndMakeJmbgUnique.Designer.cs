// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PFM.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace PFM.Infrastructure.Migrations
{
    [DbContext(typeof(PFMDbContext))]
    [Migration("20250816155605_AddCardTypeAndMakeJmbgUnique")]
    partial class AddCardTypeAndMakeJmbgUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PFM")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PFM.Domain.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("available_amount");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_number");

                    b.Property<int>("CardType")
                        .HasColumnType("integer")
                        .HasColumnName("card_type");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("owner_name");

                    b.Property<double>("ReservedAmount")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("reserved_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cards", "PFM");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("parent_code");

                    b.HasKey("Code");

                    b.HasIndex("ParentCode");

                    b.ToTable("Categories", "PFM");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Split", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CatCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("catcode");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("CatCode");

                    b.HasIndex("TransactionId");

                    b.ToTable("Splits", "PFM");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("amount");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("beneficiary_name");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<string>("CatCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("catcode");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("currency")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<int?>("Mcc")
                        .HasColumnType("integer")
                        .HasColumnName("mcc");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CatCode");

                    b.ToTable("Transactions", "PFM");
                });

            modelBuilder.Entity("PFM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("jmbg");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Jmbg")
                        .IsUnique();

                    b.ToTable("Users", "PFM");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Card", b =>
                {
                    b.HasOne("PFM.Domain.Entities.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Category", b =>
                {
                    b.HasOne("PFM.Domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Split", b =>
                {
                    b.HasOne("PFM.Domain.Entities.Category", "Category")
                        .WithMany("Splits")
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PFM.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Splits")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PFM.Domain.Entities.Card", "Card")
                        .WithMany("Transactions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PFM.Domain.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CatCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Card", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Splits");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PFM.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Splits");
                });

            modelBuilder.Entity("PFM.Domain.Entities.User", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
